<?php
/**
 * EmManSys Form Handlers
 *
 * @package EmManSys
 * @since 1.2.0
 */

// If this file is called directly, abort.
if ( ! defined( 'WPINC' ) ) {
    die;
}

class EMS_Form_Handlers {

    /**
     * Leave Request CPT Handler instance.
     * @var EMS_Leave_Request_CPT
     */
    private $leave_request_cpt;

    /**
     * Constructor.
     * @param EMS_Leave_Request_CPT $leave_request_cpt Instance of leave request CPT handler.
     */
    public function __construct( EMS_Leave_Request_CPT $leave_request_cpt ) {
        $this->leave_request_cpt = $leave_request_cpt;
    }

    /**
     * Handle form submissions for managing custom leave types.
     */
    public function handle_leave_types_form_submission() {
        // This method is identical to the one in version 1.1.20, just moved here.
        // It uses EMS_Leave_Options statically.
        if ( ! current_user_can( 'manage_options' ) ) { wp_die( esc_html__( 'You do not have permission to manage leave types.', 'emmansys' ) ); } $action = isset( $_POST['ems_leave_type_action'] ) ? sanitize_key( $_POST['ems_leave_type_action'] ) : (isset($_GET['ems_leave_type_action']) ? sanitize_key($_GET['ems_leave_type_action']) : ''); $redirect_url = admin_url( 'edit.php?post_type=leave_request&page=ems-leave-types' ); if ( $action === 'add' || $action === 'update' ) { check_admin_referer( 'ems_manage_leave_types_nonce', '_wpnonce_ems_leave_types' ); $key = isset( $_POST['ems_leave_type_key'] ) ? sanitize_key( $_POST['ems_leave_type_key'] ) : ''; $label = isset( $_POST['ems_leave_type_label'] ) ? sanitize_text_field( $_POST['ems_leave_type_label'] ) : ''; $balance = isset( $_POST['ems_leave_type_balance'] ) ? floatval( $_POST['ems_leave_type_balance'] ) : 0; if ( empty( $key ) || empty( $label ) ) { add_settings_error( 'ems_leave_types_notices', 'fields_required', __( 'Leave Type Key and Label are required.', 'emmansys' ), 'error' ); } else { if ($action === 'update' && isset($_POST['ems_original_leave_type_key'])) { $key = sanitize_key($_POST['ems_original_leave_type_key']); } if ( EMS_Leave_Options::add_or_update_custom_leave_type( $key, $label, $balance ) ) { add_settings_error( 'ems_leave_types_notices', 'success', $action === 'add' ? __( 'Leave type added successfully.', 'emmansys' ) : __( 'Leave type updated successfully.', 'emmansys' ), 'success' ); } else { add_settings_error( 'ems_leave_types_notices', 'error_saving', __( 'Failed to save leave type.', 'emmansys' ), 'error' ); } } } elseif ( $action === 'delete' ) { $key_to_delete = isset( $_GET['type_key'] ) ? sanitize_key( $_GET['type_key'] ) : ''; check_admin_referer( 'ems_delete_leave_type_' . $key_to_delete, '_wpnonce_ems_delete_leave_type' ); if ( ! empty( $key_to_delete ) ) { if ( EMS_Leave_Options::delete_custom_leave_type( $key_to_delete ) ) { add_settings_error( 'ems_leave_types_notices', 'success_delete', __( 'Leave type deleted successfully.', 'emmansys' ), 'success' ); } else { add_settings_error( 'ems_leave_types_notices', 'error_deleting', __( 'Failed to delete leave type or type not found.', 'emmansys' ), 'error' ); } } else { add_settings_error( 'ems_leave_types_notices', 'error_deleting', __( 'No leave type specified for deletion.', 'emmansys' ), 'error' ); } } set_transient('settings_errors', get_settings_errors(), 30); wp_safe_redirect( $redirect_url ); exit;
    }

    /**
     * Handles form submission from the custom "Add New Leave Request" page.
     */
    public function handle_admin_add_new_leave_request() {
        // This method is identical to the one in version 1.1.20, just moved here.
        // It uses $this->leave_request_cpt->has_overlapping_active_leave() and $this->leave_request_cpt->generate_next_leave_request_id()
        // and $this->leave_request_cpt->update_leave_balance_on_status_change()
        if ( ! isset( $_POST['_wpnonce_ems_admin_add_new_leave'] ) || ! wp_verify_nonce( $_POST['_wpnonce_ems_admin_add_new_leave'], 'ems_admin_add_new_leave_nonce' ) ) { wp_die( esc_html__( 'Security check failed.', 'emmansys' ) ); } if ( ! current_user_can( 'publish_leave_requests' ) ) { wp_die( esc_html__( 'You do not have permission to create leave requests.', 'emmansys' ) ); } $errors = array(); $form_data = $_POST; $overlap_error_occurred = false; $can_select_others_employee = current_user_can('edit_others_leave_requests'); $employee_cpt_id = 0; if ($can_select_others_employee) { $employee_cpt_id = isset( $_POST['ems_leave_employee_cpt_id'] ) ? absint( $_POST['ems_leave_employee_cpt_id'] ) : 0; } else { $current_wp_user_id = get_current_user_id(); $args_user_employee = array( 'post_type' => 'employee', 'posts_per_page' => 1, 'meta_query' => array( array( 'key' => '_employee_user_id', 'value' => $current_wp_user_id, 'compare' => '=' ) ), 'fields' => 'ids'); $current_user_employee_records = get_posts($args_user_employee); if (!empty($current_user_employee_records)) { $employee_cpt_id = $current_user_employee_records[0]; $form_data['ems_leave_employee_cpt_id'] = $employee_cpt_id; } } if ( empty( $employee_cpt_id ) ) { if (!$can_select_others_employee) { $errors[] = __('You must be linked to an Employee record to submit a leave request. Please contact an administrator.', 'emmansys'); } else { $errors[] = __( 'Employee is required.', 'emmansys' ); } } $leave_type_key  = isset( $_POST['ems_leave_type'] ) ? sanitize_key( $_POST['ems_leave_type'] ) : ''; $start_date_val  = isset( $_POST['ems_leave_start_date'] ) ? sanitize_text_field( $_POST['ems_leave_start_date'] ) : ''; $end_date_val    = isset( $_POST['ems_leave_end_date'] ) ? sanitize_text_field( $_POST['ems_leave_end_date'] ) : ''; $duration_key    = isset( $_POST['ems_leave_duration'] ) ? sanitize_key( $_POST['ems_leave_duration'] ) : ''; $reason          = isset( $_POST['ems_leave_reason_field'] ) ? sanitize_textarea_field( $_POST['ems_leave_reason_field'] ) : ''; $status          = isset( $_POST['ems_leave_status'] ) ? sanitize_key( $_POST['ems_leave_status'] ) : 'pending'; $admin_notes     = isset( $_POST['ems_leave_admin_notes'] ) ? sanitize_textarea_field( $_POST['ems_leave_admin_notes'] ) : ''; if ( empty( $leave_type_key ) ) $errors[] = __( 'Leave Type is required.', 'emmansys' ); if ( empty( $start_date_val ) ) $errors[] = __( 'Start Date is required.', 'emmansys' ); if ( empty( $end_date_val ) ) $errors[] = __( 'End Date is required.', 'emmansys' ); if ( empty( $duration_key ) ) $errors[] = __( 'Leave Duration is required.', 'emmansys' ); if ( empty( $reason ) ) $errors[] = __( 'Reason for Leave is required.', 'emmansys' ); if ( !empty($start_date_val) && !empty($end_date_val) && $end_date_val < $start_date_val ) { $errors[] = __( 'End date cannot be earlier than the start date.', 'emmansys' ); } if (empty($errors) && $employee_cpt_id) { $conflicting_leave_id = $this->leave_request_cpt->has_overlapping_active_leave($employee_cpt_id, $start_date_val, $end_date_val); if ($conflicting_leave_id) { $overlap_error_occurred = true; $conflicting_post_title = get_the_title($conflicting_leave_id); $conflicting_start_date = get_post_meta($conflicting_leave_id, '_leave_start_date', true); $conflicting_end_date   = get_post_meta($conflicting_leave_id, '_leave_end_date', true); $conflicting_status_key = get_post_meta($conflicting_leave_id, '_leave_status', true); $statuses_map = EMS_Leave_Options::get_leave_statuses(); $conflicting_status_label = $statuses_map[$conflicting_status_key] ?? esc_html($conflicting_status_key); $overlap_message = sprintf( __( 'Error: This leave request (Dates: %s to %s) overlaps with an existing active leave request: "%s" (ID: %s, Status: %s, Dates: %s - %s). Please cancel or modify the conflicting request, or change the dates/details of this request.', 'emmansys' ), esc_html($start_date_val), esc_html($end_date_val), esc_html($conflicting_post_title), $conflicting_leave_id, esc_html($conflicting_status_label), esc_html($conflicting_start_date), esc_html($conflicting_end_date) ); set_transient('ems_admin_leave_overlap_error', $overlap_message, 30); } } if ( !empty( $errors ) || $overlap_error_occurred ) { if (!empty($errors)) { foreach ( $errors as $error_msg ) { add_settings_error( 'ems_add_leave_notice', 'validation_error', $error_msg, 'error' ); } if (count(get_settings_errors('ems_add_leave_notice')) > 0) { set_transient('settings_errors', get_settings_errors('ems_add_leave_notice'), 30); } } set_transient('ems_add_leave_form_data', $form_data, 30); wp_safe_redirect( admin_url( 'edit.php?post_type=leave_request&page=ems-add-new-leave-request' ) ); exit; } $new_leave_title = $this->leave_request_cpt->generate_next_leave_request_id(); $employee_post = get_post($employee_cpt_id); $employee_name = $employee_post ? $employee_post->post_title : __('Unknown Employee', 'emmansys'); $linked_wp_user_id = $employee_post ? get_post_meta($employee_cpt_id, '_employee_user_id', true) : null; $post_author_id = $linked_wp_user_id ? $linked_wp_user_id : get_current_user_id(); $leave_request_args = array( 'post_title'  => $new_leave_title, 'post_status' => 'publish', 'post_type'   => 'leave_request', 'post_author' => $post_author_id, ); $new_leave_request_id = wp_insert_post( $leave_request_args, true ); if ( is_wp_error( $new_leave_request_id ) ) { add_settings_error( 'ems_add_leave_notice', 'insert_error', __( 'Failed to create leave request: ', 'emmansys' ) . $new_leave_request_id->get_error_message(), 'error' ); set_transient('settings_errors', get_settings_errors('ems_add_leave_notice'), 30); set_transient('ems_add_leave_form_data', $form_data, 30); wp_safe_redirect( admin_url( 'edit.php?post_type=leave_request&page=ems-add-new-leave-request' ) ); exit; } update_post_meta( $new_leave_request_id, '_leave_employee_cpt_id', $employee_cpt_id ); update_post_meta( $new_leave_request_id, '_leave_employee_name', $employee_name ); if ($linked_wp_user_id) { update_post_meta( $new_leave_request_id, '_leave_user_id', $linked_wp_user_id ); } else { update_post_meta( $new_leave_request_id, '_leave_user_id', get_current_user_id() ); } update_post_meta( $new_leave_request_id, '_leave_type', $leave_type_key ); update_post_meta( $new_leave_request_id, '_leave_start_date', $start_date_val ); update_post_meta( $new_leave_request_id, '_leave_end_date', $end_date_val ); update_post_meta( $new_leave_request_id, '_leave_duration', $duration_key ); update_post_meta( $new_leave_request_id, '_leave_reason', $reason ); update_post_meta( $new_leave_request_id, '_leave_status', $status ); update_post_meta( $new_leave_request_id, '_leave_admin_notes', $admin_notes ); if ($status === 'approved') { $this->leave_request_cpt->update_leave_balance_on_status_change($new_leave_request_id, 'newly_created', 'approved'); } add_settings_error('ems_leave_notice', 'success_create', sprintf(__( 'Leave request %s created successfully.', 'emmansys' ), $new_leave_title ), 'success'); set_transient('settings_errors', get_settings_errors('ems_leave_notice'), 30); wp_safe_redirect( admin_url( 'edit.php?post_type=leave_request' ) ); exit;
    }

    /**
     * Handles leave request submission from user profile (non-AJAX).
     */
    public function handle_profile_leave_request_submission() {
        // This method is identical to the one in version 1.1.20, just moved here.
        // It uses $this->leave_request_cpt->has_overlapping_active_leave() and $this->leave_request_cpt->generate_next_leave_request_id()
        if ( ! isset( $_POST['ems_leave_request_profile_nonce'] ) || ! wp_verify_nonce( $_POST['ems_leave_request_profile_nonce'], 'ems_submit_leave_request_nonce' ) ) { set_transient( 'ems_leave_notice_error', __( 'Security check failed.', 'emmansys' ), 60 ); wp_safe_redirect( wp_get_referer() ?: home_url() ); exit; } if ( !current_user_can('submit_profile_leave_request') ) { set_transient( 'ems_leave_notice_error', __( 'You do not have permission to submit leave requests.', 'emmansys' ), 60 ); wp_safe_redirect( wp_get_referer() ?: home_url() ); exit; } $user_id = isset($_POST['ems_user_id']) ? absint( $_POST['ems_user_id'] ) : 0; $employee_cpt_id = isset($_POST['ems_employee_cpt_id_profile']) ? absint( $_POST['ems_employee_cpt_id_profile'] ) : 0; if (get_current_user_id() != $user_id) { set_transient( 'ems_leave_notice_error', __( 'User mismatch.', 'emmansys' ), 60 ); wp_safe_redirect( wp_get_referer() ?: home_url() ); exit; } $user_info = get_userdata( $user_id ); $employee_info = get_post( $employee_cpt_id ); if ( ! $user_info || ! $employee_info || $employee_info->post_type !== 'employee' ) { set_transient( 'ems_leave_notice_error', __( 'Invalid user or employee record for leave request.', 'emmansys' ), 60 ); wp_safe_redirect( wp_get_referer() ?: get_edit_user_link( $user_id ) ); exit; } $linked_user_on_employee_cpt = get_post_meta($employee_cpt_id, '_employee_user_id', true); if (absint($linked_user_on_employee_cpt) !== $user_id) { set_transient( 'ems_leave_notice_error', __( 'Employee record mismatch.', 'emmansys' ), 60 ); wp_safe_redirect( wp_get_referer() ?: get_edit_user_link( $user_id ) ); exit; } $leave_type_key = isset( $_POST['ems_profile_leave_type'] ) ? sanitize_key( $_POST['ems_profile_leave_type'] ) : ''; $start_date_val = isset( $_POST['ems_profile_start_date'] ) ? sanitize_text_field( $_POST['ems_profile_start_date'] ) : ''; $end_date_val = isset( $_POST['ems_profile_end_date'] ) ? sanitize_text_field( $_POST['ems_profile_end_date'] ) : ''; $leave_duration_val = isset( $_POST['ems_profile_leave_duration'] ) ? sanitize_key( $_POST['ems_profile_leave_duration'] ) : 'whole_day'; $leave_reason = isset( $_POST['ems_profile_leave_reason_field'] ) ? sanitize_textarea_field( $_POST['ems_profile_leave_reason_field'] ) : ''; $today_val = current_time('Y-m-d'); if ( empty( $leave_type_key ) || empty( $start_date_val ) || empty( $end_date_val ) || empty( $leave_reason ) || empty($leave_duration_val)) { set_transient( 'ems_leave_notice_error', __( 'All fields are required for leave submission.', 'emmansys' ), 60 ); wp_safe_redirect( wp_get_referer() ?: get_edit_user_link( $user_id ) ); exit; } if ( $start_date_val < $today_val ) { set_transient( 'ems_leave_notice_error', __( 'Error: Start date cannot be in the past.', 'emmansys' ), 60 ); wp_safe_redirect( wp_get_referer() ?: get_edit_user_link( $user_id ) ); exit; } if ( $end_date_val < $start_date_val ) { set_transient( 'ems_leave_notice_error', __( 'Error: End date cannot be earlier than the start date.', 'emmansys' ), 60 ); wp_safe_redirect( wp_get_referer() ?: get_edit_user_link( $user_id ) ); exit; } $conflicting_leave_id = $this->leave_request_cpt->has_overlapping_active_leave($employee_cpt_id, $start_date_val, $end_date_val); if ($conflicting_leave_id) { set_transient( 'ems_leave_notice_error', sprintf(__( 'Error: Your leave request from %s to %s overlaps with an existing active leave request. Please cancel the existing one or choose different dates.', 'emmansys' ), $start_date_val, $end_date_val), 60 ); wp_safe_redirect( wp_get_referer() ?: get_edit_user_link( $user_id ) ); exit; } $post_title = $this->leave_request_cpt->generate_next_leave_request_id(); if (!$post_title) { $post_title = __('Leave Request', 'emmansys') . ' ' . time(); error_log("EmManSys: Failed to generate auto-increment ID for leave request during non-AJAX profile submission."); } $leave_request_data = array( 'post_title' => $post_title, 'post_status' => 'publish', 'post_type' => 'leave_request', 'post_author' => $user_id, ); $new_leave_request_id = wp_insert_post( $leave_request_data, true ); if ( is_wp_error( $new_leave_request_id ) ) { set_transient( 'ems_leave_notice_error', __( 'Failed to submit leave request: ', 'emmansys' ) . $new_leave_request_id->get_error_message(), 60 ); } else { update_post_meta( $new_leave_request_id, '_leave_employee_cpt_id', $employee_cpt_id ); update_post_meta( $new_leave_request_id, '_leave_user_id', $user_id ); update_post_meta( $new_leave_request_id, '_leave_employee_name', sanitize_text_field($employee_info->post_title) ); update_post_meta( $new_leave_request_id, '_leave_type', $leave_type_key ); update_post_meta( $new_leave_request_id, '_leave_start_date', $start_date_val ); update_post_meta( $new_leave_request_id, '_leave_end_date', $end_date_val ); update_post_meta( $new_leave_request_id, '_leave_duration', $leave_duration_val ); update_post_meta( $new_leave_request_id, '_leave_reason', $leave_reason ); update_post_meta( $new_leave_request_id, '_leave_status', 'pending' ); set_transient( 'ems_leave_notice_success', __( 'Leave request submitted successfully. It is now pending approval.', 'emmansys' ), 60 ); } wp_safe_redirect( wp_get_referer() ?: get_edit_user_link( $user_id ) ); exit;
    }
}
